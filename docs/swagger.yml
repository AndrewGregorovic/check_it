swagger: "2.0"
info:
  version: "1.0.0"
  title: "Check It"
tags:
- name: "lists"
  description: "Managing checklists"
- name: "user"
  description: "User operations"
paths:
  /lists:
    get:
      tags:
      - "lists"
      summary: "Find lists created by user id"
      operationId: "getListsByUserId"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "body"
        description: "ID of user to return lists"
        required: true
        schema:
          type: "object"
          properties:
            userId:
              type: "integer"
              format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/List"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "List not found"
    post:
      tags:
      - "lists"
      summary: "Add a new list to the database"
      description: "Sends details required to create a new list"
      operationId: "addList"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List object that needs to be added to the database"
        required: true
        schema:
          type: "object"
          properties:
            name:
              type: "string"
            repeatFrequency:
              type: "integer"
              format: "int32"
            listItems:
              type: "array"
              items:
                {}
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid input"
    patch:
      tags:
      - "lists"
      summary: "Update an existing list"
      operationId: "updateList"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/List"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "List not found"
  /lists/{listId}:
    get:
      tags:
      - "lists"
      summary: "Find list by ID"
      operationId: "getListById"
      produces:
      - "application/json"
      parameters:
      - name: "listId"
        in: "path"
        description: "ID of list to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/List"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "List not found"
    delete:
      tags:
      - "lists"
      summary: "Deletes a list"
      description: ""
      operationId: "deleteList"
      produces:
      - "application/json"
      parameters:
      - name: "listId"
        in: "path"
        description: "List id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "List not found"
  /lists/{listId}/uploadImage:
    post:
      tags:
      - "lists"
      summary: "uploads an image"
      operationId: "uploadListImage"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "listId"
        in: "path"
        description: "ID of list to update"
        required: true
        type: "integer"
        format: "int64"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: true
        type: "file"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
  /user:
    post:
      tags:
      - "user"
      summary: "Creates new user"
      description: "Sends details required to create a new user"
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        description: "Required details to create new user"
        required: true
        schema:
          type: "object"
          properties:
            username:
              type: "string"
            email:
              type: "string"
            password:
              type: "string"
      responses:
        "200":
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The username for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      operationId: "logoutUser"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
  /user/{userId}:
    get:
      tags:
      - "user"
      summary: "Get user by user id"
      operationId: "getUserById"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "The user id that needs to be fetched."
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid user id provided"
        "404":
          description: "User not found"
    patch:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "The user id that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid user id provided"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "The user id that needs to be deleted"
        required: true
        type: "integer"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid user id provided"
        "404":
          description: "User not found"
  /user/{userId}/uploadImage:
    post:
      tags:
      - "user"
      summary: "uploads an image"
      operationId: "uploadUserImage"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user to update"
        required: true
        type: "integer"
        format: "int64"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: true
        type: "file"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
definitions:
  User:
    type: "object"
    required:
    - "username"
    - "email"
    - "password"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      name:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      profileImageUrl:
        type: "string"
  List:
    type: "object"
    required:
    - "name"
    - "repeatFrequency"
    - "listItems"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      description:
        type: "string"
      thumbnailUrl:
        type: "string"
      repeatFrequency:
        type: "integer"
        format: "int32"
      listItems:
        type: "array"
        items:
          $ref: "#/definitions/ListItem"
  ListItem:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      index:
        type: "integer"
        format: "int32"
      itemStatus:
        type: "boolean"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"